{
  "tests": [
    {
      "name": "test_echo",
      "handler": "core.ping",
      "request": {
        "msg": "message"
      },
      "assertion":
        {
          "response": { "msg": "pong[message]" }
        }
    },
    {
      "name": "test_string_payload",
      "handler": "core.str_ping",
      "request": "message",
      "assertion":
        {
          "response": { "msg": "pong[message]" }
        }
    },
    {
      "name": "test_module_echo",
      "handler": "core.HandlerClass.ping",
      "request": {
        "msg": "MyMessage"
      },
      "assertion":
        {
          "response": "Module Message: 'MyMessage'"
        }
    },
    {
      "name": "test_deep_module_echo",
      "handler": "core.DeepModule::Handler.ping",
      "request": {
        "msg": "MyMessage"
      },
      "assertion":
        {
          "response": "Deep Module Message: 'MyMessage'"
        }
    },
    {
      "name": "test_error",
      "handler": "core.broken",
      "request": {
        "msg": "message"
      },
      "assertion":
        {
          "errorType": "Function<ArgumentError>"
        }
    },
    {
      "name": "test_string",
      "handler": "core.string",
      "request": {
        "msg": "MyMessage"
      },
      "assertion":
        {
          "response": "Message: 'MyMessage'"
        }
    },
    {
      "name": "test_unicode",
      "handler": "unicode.hello",
      "request": "",
      "assertion":
        {
          "response": { "hello": "今日はラムダ!" }
        }
    },
    {
      "name": "test_underscore_handler",
      "handler": "underscore_file.underscore_method",
      "request": "",
      "assertion":
        {
          "response": "Success!"
        }
    },
    {
      "name": "test_dependencies",
      "handler": "dependencies.get_tomorrow",
      "request": {
        "input_time": "2018-10-08 11:34:20 +0100"
      },
      "assertion":
        {
          "response": {"tomorrow": "2018-10-09T11:34:20.000+01:00" }
        }
    },
    {
      "name": "test_dynamic_libs_are_available",
      "handler": "dependencies.find_dynamic_libs",
      "request": "",
      "assertion":
        {
          "response": "ok"
        }
    },
    {
      "name": "test_echo_env_variable",
      "handler": "environment.echo",
      "environmentVariables": {
        "TEST_ENV_VARIABLE": "Golden Tate made that catch."
      },
      "request": {
        "varname": "TEST_ENV_VARIABLE"
      },
      "assertion":
        {
          "response": "Golden Tate made that catch."
        }
    },
    {
      "name": "test_env_runtime_api_is_not_deleted",
      "handler": "environment.env_var_is_present",
      "environmentVariables": {
        "AWS_LAMBDA_RUNTIME_API": "127.0.0.1:9001"
      },
      "request": {
        "varname": "AWS_LAMBDA_RUNTIME_API"
      },
      "assertion":
        {
          "response": "true"
        }
    },
    {
      "name": "test_env_telmetry_log_fd_deleted",
      "handler": "environment.env_var_is_present",
      "environmentVariables": {
        "_LAMBDA_TELEMETRY_LOG_FD": "test/unit/resources/fd/test_fd"
      },
      "request": {
        "varname": "_LAMBDA_TELEMETRY_LOG_FD"
      },
      "assertion":
        {
          "response": "false"
        }
    },
    {
      "name": "test_put_uses_telemetry_log_fd",
      "handler": "log.put_messages_and_read_fd",
      "environmentVariables": {
        "_LAMBDA_TELEMETRY_LOG_FD": "test/unit/resources/fd/test_fd"
      },
      "request": {
        "messages": ["Single frame\n even if there are multiple lines\nthird line"],
        "fd_path": "test/unit/resources/fd/test_fd"
      },
      "assertion":
        {
          "response": "277413888157Single frame\n even if there are multiple lines\nthird line"
        }
    },
    {
      "name": "test_put_frozen_string",
      "handler": "log.put_frozen_string",
      "environmentVariables": {
        "_LAMBDA_TELEMETRY_LOG_FD": "test/unit/resources/fd/test_fd"
      },
      "request": {
        "messages": ["ELSA"],
        "fd_path": "test/unit/resources/fd/test_fd"
      },
      "assertion":
        {
          "response": "ok"
        }
    },
    {
      "name": "test_put_uses_telemetry_log_fd_multiple_frames",
      "handler": "log.put_messages_and_read_fd",
      "environmentVariables": {
        "_LAMBDA_TELEMETRY_LOG_FD": "test/unit/resources/fd/test_fd"
      },
      "request": {
        "messages": ["First message first line\n second line", "Second message first line\n second line"],
        "fd_path": "test/unit/resources/fd/test_fd"
      },
      "assertion":
        {
          "response": "277413888137First message first line\n second line277413888138Second message first line\n second line"
        }
    },
    {
      "name": "test_logger_uses_telemetry_log_fd_when_logdev_is_stdout",
      "handler": "log.log_to_stdout_and_read_fd",
      "environmentVariables": {
        "_LAMBDA_TELEMETRY_LOG_FD": "test/unit/resources/fd/test_fd"
      },
      "request": {
        "messages": ["Single frame\n even if there are multiple lines\nthird line"],
        "fd_path": "test/unit/resources/fd/test_fd"
      },
      "assertion":
        {
          "transform": "\"277413888114[0-9]I, \\[[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T(2[0-3]|[01][0-9]):[0-5][0-9]:[0-9]{2}.[0-9]{6} #[0-9]*\\]  INFO ({){0,1}[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}(}){0,1} -- : Single frame\\\\n even if there are multiple lines\\\\nthird line\"",
          "response": true
        }
    },
    {
      "name": "test_logger_logs_to_a_file_when_logdev_is_a_file",
      "handler": "log.log_to_file_and_read_back",
      "environmentVariables": {
        "_LAMBDA_TELEMETRY_LOG_FD": "test/unit/resources/fd/test_fd"
      },
      "request": {
        "messages": ["Single frame written to a file\n even if there are multiple lines\nthird line"],
        "fd_path": "test/unit/resources/fd/test_fd",
        "file_path": "test/unit/resources/fd/test_file.txt"
      },
      "assertion":
        {
          "transform": "I, \\[[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T(2[0-3]|[01][0-9]):[0-5][0-9]:[0-9]{2}.[0-9]{6} #[0-9]*\\]  INFO -- : Single frame written to a file\\\\n even if there are multiple lines\\\\nthird line",
          "response": true
        }
    },
    {
      "name": "test_logger_uses_telemetry_log_fd_when_logdev_is_stderr",
      "handler": "log.log_to_stderr_and_read_fd",
      "environmentVariables": {
        "_LAMBDA_TELEMETRY_LOG_FD": "test/unit/resources/fd/test_fd"
      },
      "request": {
        "messages": ["Single frame\n even if there are multiple lines\nthird line"],
        "fd_path": "test/unit/resources/fd/test_fd"
      },
      "assertion":
        {
          "transform": "\"277413888114[0-9]E, \\[[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T(2[0-3]|[01][0-9]):[0-5][0-9]:[0-9]{2}.[0-9]{6} #[0-9]*\\] ERROR ({){0,1}[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}(}){0,1} -- : Single frame\\\\n even if there are multiple lines\\\\nthird line\"",
          "response": true
        }
    },
    {
      "name": "test_arguments_are_flattened_and_separated_by_newline_when_logging",
      "handler": "log.put_messages_and_read_fd",
      "environmentVariables": {
        "_LAMBDA_TELEMETRY_LOG_FD": "test/unit/resources/fd/test_fd"
      },
      "request": {
        "messages": [["first_level","an_other_first_level", ["second_level"]]],
        "fd_path": "test/unit/resources/fd/test_fd"
      },
      "assertion":
        {
          "response": "277413888145first_level\nan_other_first_level\nsecond_level"
        }
    },
    {
      "name": "test_fallback_to_stdout_silently_when_can_not_open_telemetry_log_fd",
      "handler": "log.put_message",
      "environmentVariables": {
        "_LAMBDA_TELEMETRY_LOG_FD": "/unreachable/test_fd"
      },
      "request": {
        "messages": ["It should fall back silently"]
      },
      "assertion":
        {
          "response": "ok"
        }
    },
    {
      "name": "test_invalid_handler_definition_short",
      "handler": "invalid",
      "request": {},
      "assertion":
        {
          "errorType": "Init<ArgumentError>"
        }
    },
    {
      "name": "test_invalid_handler_definition_long",
      "handler": "invalid.because.too.long",
      "request": {},
      "assertion":
        {
          "errorType": "Init<ArgumentError>"
        }
    },
    {
      "name": "test_invalid_handler_file",
      "handler": "doesnt_exist.doesnt_matter",
      "request": {},
      "assertion":
        {
          "errorType": "Init<LoadError>"
        }
    },
    {
      "name": "test_invalid_handler_method",
      "handler": "pandoras_box.sir_not_appearing_in_this_file",
      "request": {},
      "assertion":
        {
          "errorType": "Function<NoMethodError>"
        }
    },
    {
      "name": "test_invalid_handler_class",
      "handler": "pandoras_box.Does::Not::Exist.handler",
      "request": {},
      "assertion":
        {
          "errorType": "Function<NameError>"
        }
    },
    {
      "name": "test_invalid_handler_method_in_class",
      "handler": "pandoras_box.PandoraTest.handler",
      "request": {},
      "assertion":
        {
          "errorType": "Function<NoMethodError>"
        }
    },
    {
      "name": "test_invalid_dependency",
      "handler": "bad_dependency.handler",
      "request": {},
      "assertion":
        {
          "errorType": "Init<LoadError>"
        }
    },
    {
      "name": "test_stack_overflow",
      "handler": "pandoras_box.stack_overflow",
      "request": {},
      "assertion":
        {
          "errorType": "Function<SystemStackError>"
        }
    },
    {
      "name": "test_process_exit",
      "handler": "pandoras_box.hard_exit",
      "request": {},
      "assertion":
        {
          "errorType": "Function<SystemExit>"
        }
    },
    {
      "name": "test_curl",
      "handler": "core.curl",
      "request":
      {
        "url": "http://example.org"
      },
      "assertion":
        {
          "response": { "success": true }
        }
    },
    {
      "name": "test_ctx_cognito_pool_id",
      "handler": "ctx.get_cognito_pool_id",
      "cognitoIdentity": {
        "cognitoIdentityId": "4ab95ea510c14353a7f6da04489c43b8",
        "cognitoIdentityPoolId": "35ab4794a79a4f23947d3e851d3d6578"
      },
      "request": {},
      "assertion":
        {
          "response": { "cognito_pool_id": "35ab4794a79a4f23947d3e851d3d6578"}
        }
    },
    {
      "name": "test_ctx_cognito_identity_id",
      "handler": "ctx.get_cognito_identity_id",
      "cognitoIdentity": {
        "cognitoIdentityId": "4ab95ea510c14353a7f6da04489c43b8",
        "cognitoIdentityPoolId": "35ab4794a79a4f23947d3e851d3d6578"
      },
      "request": {},
      "assertion":
        {
          "response": { "cognito_identity_id": "4ab95ea510c14353a7f6da04489c43b8"}
        }
    },
    {
      "name": "echo_client_context",
      "handler": "ctx.echo_context",
      "clientContext":
      {
        "custom": {
          "a": "1",
          "b": "1"
        },
        "env": {
          "make": "samsung",
          "platform": "android"
        },
        "client": {
          "installation_id": "id1234",
          "app_title": "title",
          "app_version_name": "alpha",
          "app_version_code": "9.9",
          "app_package_name": "pname"
        }
      },
      "request": "yo",
      "assertion":
        {
          "response":
          {
            "custom": {
              "a": "1",
              "b": "1"
            },
            "env": {
              "make": "samsung",
              "platform": "android"
            },
            "client": {
              "installation_id": "id1234",
              "app_title": "title",
              "app_version_name": "alpha",
              "app_version_code": "9.9",
              "app_package_name": "pname"
            }
          }
        }
    }
  ]
}
